import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import com.github.spotbugs.snom.SpotBugsTask
import com.github.jk1.license.render.ReportRenderer
import com.github.jk1.license.render.InventoryHtmlReportRenderer
import com.github.jk1.license.render.TextReportRenderer
import com.github.jk1.license.filter.DependencyFilter
import com.github.jk1.license.filter.LicenseBundleNormalizer

/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id("buildlogic.java-library-conventions")
    id("io.freefair.lombok") version "8.10.2"
    id("me.champeau.jmh") version "0.7.2"
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.morethan.jmhreport") version "0.9.6"
    `java-test-fixtures`
    id("com.github.jk1.dependency-license-report") version "2.9"
    `signing`
    `maven-publish`
    `java`
}

licenseReport {
    renderers = arrayOf<ReportRenderer>(InventoryHtmlReportRenderer("report.html", "Backend"), TextReportRenderer())
}


// Allow to separate dependencies for reference testing
sourceSets {
    create("referenceTest") {
        compileClasspath += sourceSets.main.get().output
        runtimeClasspath += sourceSets.main.get().output
    }
}

sourceSets {
    create("integrationTest") {
        compileClasspath += sourceSets.main.get().output
        runtimeClasspath += sourceSets.main.get().output
    }
}

val referenceTestImplementation by configurations.getting {
    extendsFrom(configurations.testImplementation.get())
}

val referenceTestRuntimeOnly by configurations.getting
configurations["referenceTestRuntimeOnly"].extendsFrom(configurations.runtimeOnly.get())


val integrationTestImplementation by configurations.getting {
    extendsFrom(configurations.testImplementation.get())
}

val integrationTestRuntimeOnly by configurations.getting
configurations["referenceTestRuntimeOnly"].extendsFrom(configurations.runtimeOnly.get())

dependencies {
    api(project(":object-client"))

    implementation(project(":common"))
    implementation(libs.parquet.format)
    implementation(libs.slf4j.api)

    jmhImplementation(libs.s3)
    jmhImplementation(libs.s3.transfer.manager)
    jmhImplementation(testFixtures(project(":input-stream")))

    testFixturesImplementation(libs.s3)
    testFixturesImplementation(project(":input-stream"))
    testFixturesImplementation(project(":object-client"))
    testFixturesImplementation(project(":common"))

    testImplementation(libs.s3)
    testImplementation(libs.junit.jupiter)
    testImplementation(libs.mockito.core)
    testImplementation(libs.mockito.inline)
    testImplementation(libs.mockito.junit.jupiter)
    testImplementation(libs.sdk.url.connection.client)
    testImplementation(libs.netty.nio.client)
    testRuntimeOnly(libs.junit.jupiter.launcher)

    referenceTestImplementation(libs.s3mock.testcontainers)
    referenceTestImplementation(libs.testcontainers.junit.jupiter)
    referenceTestImplementation(libs.jqwik)
    referenceTestImplementation(libs.jqwik.testcontainers)
    referenceTestImplementation(libs.testcontainers)
    referenceTestRuntimeOnly(libs.junit.jupiter.launcher)
}

tasks.withType<JavaCompile>().configureEach {
}

tasks.compileJava {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

tasks.named("compileReferenceTestJava", JavaCompile::class) {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(17)
    }

    options.compilerArgs.add("-parameters")
}

val shadowJar = tasks.withType<ShadowJar> {
    relocate("org.apache.parquet.format", "com.amazon.shaded.apache.parquet.format")
    relocate("shaded.parquet.org.apache.thrift", "com.amazon.shaded.parquet.org.apache.thrift")
}

val refTest = task<Test>("referenceTest") {
    description = "Runs reference tests."
    group = "verification"

    testClassesDirs = sourceSets["referenceTest"].output.classesDirs
    classpath = sourceSets["referenceTest"].runtimeClasspath

    useJUnitPlatform()

    testLogging {
        events("passed")
        events("failed")
    }

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(17)
    }

    environment("AWS_REGION", "eu-west-1")
}

val integrationTest = task<Test>("integrationTest") {
    description = "Runs integration tests."
    group = "verification"

    testClassesDirs = sourceSets["integrationTest"].output.classesDirs
    classpath = sourceSets["integrationTest"].runtimeClasspath

    useJUnitPlatform()

    testLogging {
        events("passed")
        events("failed")
    }

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.spotbugsJmh {
    reports.create("html") {
        required = true
        setStylesheet("fancy-hist.xsl")
    }
}

tasks.named<SpotBugsTask>("spotbugsReferenceTest") {
    reports.create("html") {
        required = true
        setStylesheet("fancy-hist.xsl")
    }
}

tasks.named<SpotBugsTask>("spotbugsIntegrationTest") {
    reports.create("html") {
        required = true
        setStylesheet("fancy-hist.xsl")
    }
}

tasks.named<SpotBugsTask>("spotbugsTestFixtures") {
    reports.create("html") {
        required = true
        setStylesheet("fancy-hist.xsl")
    }
}

tasks.build {dependsOn(shadowJar)}

val jmhOutputPath = "reports/jmh"
val jmhJsonOutputResultsPath = "reports/jmh/results.json"

// JMH micro-benchmarks
jmh {
    jmhVersion = "1.37"
    failOnError = true
    forceGC = true
    includeTests = false
    resultFormat = "JSON"
    resultsFile = project.layout.buildDirectory.file(jmhJsonOutputResultsPath)
    zip64 = true
}

jmhReport {
    jmhResultPath = project.layout.buildDirectory.file(jmhJsonOutputResultsPath).get().toString()
    jmhReportOutput = project.layout.buildDirectory.file(jmhOutputPath).get().toString()
}

tasks.jmh {
    finalizedBy(tasks.jmhReport)
}

tasks.jar {
    enabled = false
}

tasks.named<Test>("test") {
    classpath = sourceSets["main"].output + sourceSets["test"].output + configurations["testRuntimeClasspath"]
}

// Custom Shadow JAR
tasks.register<ShadowJar>("customShadowJar") {
    archiveBaseName.set("analyticsaccelerator-s3")
    archiveClassifier.set("all")
    archiveVersion.set("0.0.1")
    from(sourceSets.main.get().output)
}

// Custom Sources JAR
tasks.register<Jar>("customSourcesJar") {
    archiveBaseName.set("analyticsaccelerator-s3")
    archiveClassifier.set("sources")
    archiveVersion.set("0.0.1")
    from(sourceSets["main"].allSource)
}

// Custom Javadoc JAR
tasks.register<Jar>("customJavadocJar") {
    archiveBaseName.set("analyticsaccelerator-s3")
    archiveClassifier.set("javadoc")
    archiveVersion.set("0.0.1")
    dependsOn(tasks.named("javadoc"))
    from(tasks.javadoc.get().destinationDir)
}

// Override output
tasks.withType<Jar>().configureEach {
    enabled = name in setOf("customShadowJar", "customSourcesJar", "customJavadocJar")
}

tasks.javadoc {
    options {
        (this as StandardJavadocDocletOptions).apply {
            addStringOption("Xdoclint:none", "-quiet")}
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        create<MavenPublication>("mavenJava") {
            from(components["java"])
            artifact(tasks.named("customShadowJar").get()) {
                classifier = null
            }
            artifact(tasks.named("customSourcesJar"))
            artifact(tasks.named("customJavadocJar"))

            groupId = "software.amazon.s3.analyticsaccelerator"
            artifactId = "analyticsaccelerator-s3"
            version = "0.0.1"
            pom {
                name = "S3 Analytics Accelerator Library for Amazon S3"
                description = "S3 Analytics Accelerator Library for Amazon S3"
                url = "https://github.com/awslabs/analytics-accelerator-s3"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        organization = "Amazon Web Services"
                        organizationUrl = "https://aws.amazon.com"
                    }
                }
                scm {
                    url = "https://github.com/awslabs/analytics-accelerator-s3/tree/main"
                    connection = "scm:git:ssh://git@github.com:awslabs/analytics-accelerator-s3.git"
                    developerConnection = "scm:git:ssh://git@github.com:awslabs/analytics-accelerator-s3.git"
                }
            }
        }
    }
    repositories {
        maven{
            name = "sonatype"
            url = uri("https://aws.oss.sonatype.org/service/local/staging/deploy/maven2/")
           credentials {
               username = findProperty("mavenUsername") as String? ?: ""
               password = findProperty("mavenPassword") as String? ?: ""
           }
        }
    }
}

signing {
    sign(publishing.publications["mavenJava"])
}